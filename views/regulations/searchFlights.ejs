<% layout('layouts/boilerplate') %>

<!-- Hero -->
<div class="bg-light py-lg-2 text-center border-bottom mt-1">
  <img
    src="/images/PetVoyageLogo.png"
    class="img-fluid rounded-top d-block mx-auto"
    alt="PetVoyage Logo - Pet Travel Regulations and Policies"
    width="200" height="200"
  />
  <h1 class="fw-bold display-5">Compare Pet Travel Policies Easily</h1>
  <p class="fs-5 text-muted">Select your countries and pet type to see import/export rules instantly.</p>

  <div class="mt-4">
    <%- include('../partials/navigation') %>
  </div>
</div>

<div class="container mt-5">
  <div class="row justify-content-center mb-5">
    <!-- Main content -->
    <div class="col-lg-8">
      <div class="card bg-white shadow-lg mb-3 border">
        <div class="card-body">
          <h2 class="text-center text-primary-emphasis mb-4"><strong>Search for Flights</strong></h2>
          <p>
            Still looking for the perfect airline to transport you and your pet? Locate flights available to your destination.
            Check out our <a href="/tips" target="_blank" rel="noopener noreferrer">Tips Section</a> for our suggestions
            regarding picking an airline.
          </p>

          <form class="validated-form" action="/flights/searchFlights" method="POST">
            <!-- Current location -->
            <div class="form-group mb-3">
              <label for="currentLocation">Your Current Location</label>
              <input type="text" id="currentLocation" class="form-control"
                     placeholder="Detecting your location... If you are flying from another city please type it">
            </div>

            <!-- Map -->
            <div id="map" class="border mt-3" style="height: 400px; width: 100%;"></div>

            <!-- Nearby airport -->
            <div class="form-group mt-4">
              <label for="airport">Select Airport Near You</label>
              <select name="airport" id="airport" class="form-control" required>
                <option value="">Choose an airport</option>
              </select>
            </div>

            <!-- Destination search -->
            <div class="form-group mt-4">
              <label for="destination">Enter Destination</label>
              <input type="text" name="destination" id="destination" class="form-control"
                     placeholder="Enter destination city/airport" required>
            </div>

            <!-- Destination airport -->
            <div class="form-group mt-4">
              <label for="destinationLocation">Choose Destination Airport</label>
              <select id="destinationLocation" name="destinationLocation" class="form-control" required>
                <option value="">Select an airport...</option>
              </select>
            </div>

            <!-- Hidden fields (lat/lng & selected names) -->
            <input type="hidden" id="currentLat" name="currentLat" value="">
            <input type="hidden" id="currentLng" name="currentLng" value="">

            <input type="hidden" id="selectedAirport" name="selectedAirport" value="">
            <input type="hidden" id="selectedAirportLat" name="selectedAirportLat" value="">
            <input type="hidden" id="selectedAirportLng" name="selectedAirportLng" value="">

            <input type="hidden" id="selectedDestinationAirport" name="selectedDestinationAirport" value="">
            <input type="hidden" id="selectedDestinationLat" name="selectedDestinationLat" value="">
            <input type="hidden" id="selectedDestinationLng" name="selectedDestinationLng" value="">

            <div class="d-grid gap-2 mt-3">
              <button id="searchBtn" type="submit" class="btn btn-outline-dark">Search Flights</button>
            </div>

            <!-- Inline loader -->
            <div id="loadingSpinner" class="text-center my-4" style="display: none;">
              <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
              <p class="mt-2">Searching for flights...</p>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- Right rail / aside -->
    <aside class="col-lg-4 d-none d-lg-block">
      <div class="sticky-lg-top" style="top:1.5rem;">
        <div class="mb-3">
          <%- include('../partials/ads/taxiAd') %>
        </div>

        <div class="card border-0 shadow-sm">
          <div class="card-body p-3">
            <%- include('../partials/toDoList') %>
          </div>
        </div>
      </div>
    </aside>
  </div>
</div>

<!-- Full-screen loading overlay (outside container so it covers the whole page) -->
<div id="loadingOverlay"
     style="display:none;position:fixed;top:0;left:0;width:100%;height:100%;
            background:rgba(255,255,255,0.9);z-index:9999;
            backdrop-filter:blur(3px);text-align:center;">
  <div style="position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);">
    <div class="spinner-border text-primary" role="status" style="width:4rem;height:4rem;">
      <span class="visually-hidden">Loading...</span>
    </div>
    <p class="mt-3 fs-5 text-primary">Searching for flights…</p>
  </div>
</div>

<!-- Google Maps (places) -->
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC9pMTMgluQR2zPuGr3vbKplafuZpf22CI&libraries=places"></script>

<script>
  let map;
  let marker;

  // Initialize map with user's location (or gracefully no-geo)
  navigator.geolocation.getCurrentPosition(
    function (position) {
      const lat = position.coords.latitude;
      const lng = position.coords.longitude;
      bootMap(lat, lng);
      fetchNearbyAirportsOrigin(lat, lng);
    },
    function () {
      // Fallback: center USA roughly if blocked
      bootMap(37.7749, -122.4194);
    }
  );

  function bootMap(lat, lng) {
    document.getElementById('currentLat').value = lat;
    document.getElementById('currentLng').value = lng;

    map = new google.maps.Map(document.getElementById('map'), {
      center: { lat: lat, lng: lng },
      zoom: 12
    });

    marker = new google.maps.Marker({
      position: { lat: lat, lng: lng },
      map: map,
      title: 'You are here!'
    });

    // Autocomplete for currentLocation (allows typing a different origin city)
    const currentLocationInput = document.getElementById('currentLocation');
    const ac = new google.maps.places.Autocomplete(currentLocationInput, { types: ['geocode'] });
    ac.addListener('place_changed', function () {
      const place = ac.getPlace();
      if (place.geometry && place.geometry.location) {
        const selectedLat = place.geometry.location.lat();
        const selectedLng = place.geometry.location.lng();
        document.getElementById('currentLat').value = selectedLat;
        document.getElementById('currentLng').value = selectedLng;
        map.setCenter({ lat: selectedLat, lng: selectedLng });
        fetchNearbyAirportsOrigin(selectedLat, selectedLng);
      }
    });

    // Destination autocomplete (city/region)
    const destInput = document.getElementById('destination');
    const acDest = new google.maps.places.Autocomplete(destInput, { types: ['geocode'] });
    acDest.addListener('place_changed', function () {
      const place = acDest.getPlace();
      if (place.geometry && place.geometry.location) {
        const lat = place.geometry.location.lat();
        const lng = place.geometry.location.lng();
        fetchNearbyAirportsDest(lat, lng);
      }
    });
  }

  // Origin airports
  function fetchNearbyAirportsOrigin(lat, lng) {
    const service = new google.maps.places.PlacesService(map);
    const request = {
      query: "airport",
      location: new google.maps.LatLng(lat, lng),
      radius: 50000
    };

    const airportDropdown = document.getElementById('airport');
    airportDropdown.innerHTML = '';
    service.textSearch(request, function (results, status) {
      if (status === google.maps.places.PlacesServiceStatus.OK) {
        results.forEach(function (place, index) {
          const option = document.createElement('option');
          option.value = place.place_id;
          option.text = place.name;
          airportDropdown.appendChild(option);

          if (index === 0) {
            airportDropdown.value = place.place_id;
            getAirportLatLng(place.place_id, 'selectedAirportLat', 'selectedAirportLng');
            document.getElementById('selectedAirport').value = place.name;
          }
        });

        airportDropdown.addEventListener('change', function () {
          const placeId = this.value;
          if (placeId) {
            getAirportLatLng(placeId, 'selectedAirportLat', 'selectedAirportLng');
            document.getElementById('selectedAirport').value = this.options[this.selectedIndex].text;
          }
        });
      }
    });
  }

  // Destination airports
  function fetchNearbyAirportsDest(lat, lng) {
    const service = new google.maps.places.PlacesService(map);
    const request = {
      query: "airport",
      location: new google.maps.LatLng(lat, lng),
      radius: 50000
    };

    const airportDropdown = document.getElementById('destinationLocation');
    airportDropdown.innerHTML = '<option value="">Select an airport...</option>';

    service.textSearch(request, function (results, status) {
      if (status === google.maps.places.PlacesServiceStatus.OK) {
        results.forEach(function (place) {
          const option = document.createElement('option');
          option.value = place.place_id;
          option.text = place.name;
          airportDropdown.appendChild(option);
        });

        airportDropdown.addEventListener('change', function () {
          const placeId = this.value;
          if (placeId) {
            getAirportLatLng(placeId, 'selectedDestinationLat', 'selectedDestinationLng');
            document.getElementById('selectedDestinationAirport').value = this.options[this.selectedIndex].text;
          }
        });
      }
    });
  }

  // Resolve placeId -> lat/lng (used by server to map to IATA)
  function getAirportLatLng(placeId, latField, lngField) {
    const service = new google.maps.places.PlacesService(map);
    const request = { placeId, fields: ['name','geometry'] };

    service.getDetails(request, function (place, status) {
      if (status === google.maps.places.PlacesServiceStatus.OK) {
        const lat = place.geometry.location.lat();
        const lng = place.geometry.location.lng();
        document.getElementById(latField).value = lat;
        document.getElementById(lngField).value = lng;

        new google.maps.Marker({
          position: { lat, lng },
          map: map,
          title: place.name
        });
      }
    });
  }
</script>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const form = document.querySelector('form[action="/flights/searchFlights"]');
    const overlay = document.getElementById("loadingOverlay");
    if (!form || !overlay) return;

    form.addEventListener("submit", function () {
      // ✅ Show overlay
      overlay.style.display = "block";
      overlay.classList.add("show");

      // ✅ Only disable submit buttons to prevent double-submits
      form.querySelectorAll('button[type="submit"], input[type="submit"]').forEach(btn => {
        btn.disabled = true;
      });

      // ❌ Do NOT disable inputs/selects — hidden fields must still submit!
      // form.querySelectorAll("button, input, select").forEach(el => el.disabled = true); // remove this
    });
  });
</script>
