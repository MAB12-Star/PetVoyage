<% layout('layouts/boilerplate') %>

<div class="container py-4">
  <h1 class="mb-3">Write your pet travel story</h1>

  <form id="story-form" method="post" action="/blog/new" enctype="multipart/form-data" class="card p-3 shadow-sm">
    <!-- Title -->
    <div class="mb-3">
      <label class="form-label">Title <span class="text-danger">*</span></label>
      <input name="title" class="form-control" required maxlength="140" placeholder="Catchy title for your flight story">
      <div class="form-text">Max 140 characters.</div>
    </div>

    <!-- Quick metadata (all plain inputs) -->
    <div class="row g-3">
      <div class="col-md-4">
  <label class="form-label">Airline (optional)</label>
  <!-- Text input with native suggestions -->
  <input name="airline"
         id="airline-input"
         class="form-control"
         placeholder="e.g., Volaris"
         list="airlineList"
         autocomplete="off">

  <!-- Suggestions (rendered only if airlines provided) -->
  <datalist id="airlineList">
    <% (airlines || []).forEach(a => { %>
      <option value="<%= a.name %>" data-slug="<%= a.slug %>"></option>
    <% }) %>
  </datalist>

  <!-- Hidden slug captured if user picks a matching airline -->
  <input type="hidden" name="airlineSlug" id="airline-slug">
  <div class="form-text">Start typing to see suggestions, or enter a custom airline.</div>
</div>

      <div class="col-md-4">
        <label class="form-label">From (optional)</label>
        <input name="routeFrom" class="form-control" placeholder="City / Airport (e.g., SFO)">
      </div>
      <div class="col-md-4">
        <label class="form-label">To (optional)</label>
        <input name="routeTo" class="form-control" placeholder="City / Airport (e.g., CDMX)">
      </div>
    </div>

    <div class="row g-3 mt-1">
      <div class="col-md-4">
        <label class="form-label">Destination country (optional)</label>
        <input name="country" class="form-control" placeholder="e.g., Mexico">
      </div>
      <div class="col-md-4">
        <label class="form-label">Pet type (optional)</label>
        <select name="petType" class="form-select">
          <option value="">Chooseâ€¦</option>
          <option value="dog">dog</option>
          <option value="cat">cat</option>
          <option value="bird">bird</option>
          <option value="reptile">reptile</option>
          <option value="other">other</option>
        </select>
      </div>
      <div class="col-md-4">
        <label class="form-label">Pet types (comma separated, optional)</label>
        <input name="petTypes" class="form-control" placeholder="dog, cat">
      </div>
    </div>

    <div class="mb-3 mt-3">
      <label class="form-label">Short summary (optional)</label>
      <input name="summary" class="form-control" maxlength="300" placeholder="1â€“2 lines (what worked, surprises, tips)">
      <div class="form-text">Max 300 characters.</div>
    </div>

    <!-- === Simple Rich Text Editor === -->
    <style>
      .rte-toolbar{ gap:.4rem; }
      .rte-toolbar .btn{ --bs-btn-padding-y:.25rem; --bs-btn-padding-x:.5rem; --bs-btn-font-size:.85rem; }
      #pv-editor{ min-height:260px; line-height:1.6; }
      .pv-limit-note{ font-size:.85rem; color:#6c757d }
    </style>

    <div class="mb-2">
      <label class="form-label d-flex align-items-center justify-content-between">
        <span>Your Story <span class="text-danger">*</span></span>
        <span class="pv-limit-note">Basic formatting supported (Bold, lists, H2/H3, links)</span>
      </label>

      <!-- Toolbar -->
      <div class="btn-toolbar rte-toolbar mb-2" role="toolbar" aria-label="Formatting">
        <div class="btn-group btn-group-sm" role="group" aria-label="Emphasis">
          <button class="btn btn-outline-secondary" type="button" data-cmd="bold" title="Bold"><strong>B</strong></button>
          <button class="btn btn-outline-secondary" type="button" data-cmd="underline" title="Underline"><u>U</u></button>
          <button class="btn btn-outline-secondary" type="button" data-cmd="italic" title="Italic"><em>I</em></button>
        </div>
        <div class="btn-group btn-group-sm" role="group" aria-label="Headings">
          <button class="btn btn-outline-secondary" type="button" data-block="p" title="Paragraph">P</button>
          <button class="btn btn-outline-secondary" type="button" data-block="h2" title="Heading 2">H2</button>
          <button class="btn btn-outline-secondary" type="button" data-block="h3" title="Heading 3">H3</button>
        </div>
        <div class="btn-group btn-group-sm" role="group" aria-label="Lists">
          <button class="btn btn-outline-secondary" type="button" data-cmd="insertUnorderedList" title="Bulleted list">â€¢ List</button>
          <button class="btn btn-outline-secondary" type="button" data-cmd="insertOrderedList" title="Numbered list">1. List</button>
        </div>
        <div class="btn-group btn-group-sm" role="group" aria-label="Link">
          <button class="btn btn-outline-secondary" type="button" id="pv-insert-link" title="Insert link">Link</button>
        </div>
        <div class="btn-group btn-group-sm" role="group" aria-label="Clear">
          <button class="btn btn-outline-secondary" type="button" id="pv-clear-format" title="Clear formatting">Clear</button>
        </div>
      </div>

      <!-- Editable area -->
      <div id="pv-editor" class="form-control" contenteditable="true"
           aria-label="Story editor"
           placeholder="Tell us how you prepared, airline experience, documents, check-in, arrival, etc."></div>

      <!-- ðŸ”§ Hidden field that actually submits (no 'required') -->
      <input type="hidden" name="body" id="pv-editor-output">

      <div class="d-flex justify-content-between">
        <div class="form-text">You can paste plain text; images should be added via the picker below.</div>
        <div class="form-text"><span id="pv-wordcount">0</span> words</div>
      </div>
    </div>
    <!-- === /Simple Rich Text Editor === -->

    <!-- Photos -->
    <div class="mb-3">
      <label class="form-label">Photos (up to 6)</label>
      <input type="file" id="pv-photos" name="photos" class="form-control" accept="image/*" multiple>
      <div class="form-text">JPG/PNG/WebP/GIF, up to 8MB each. Landscape looks best.</div>
      <div id="pv-photo-previews" class="d-flex flex-wrap gap-2 mt-2"></div>
    </div>

    <!-- Actions -->
    <div class="d-flex gap-2">
      <button class="btn btn-primary" type="submit">Publish</button>
      <a class="btn btn-outline-secondary" href="/blog">Cancel</a>
    </div>
  </form>
</div>

<script>
  (function(){
    const input = document.getElementById('airline-input');
    const slugField = document.getElementById('airline-slug');
    const dl = document.getElementById('airlineList');

    function syncSlug(){
      // Try to match the typed value to a datalist option (case-insensitive)
      const val = (input.value || '').trim().toLowerCase();
      let matchedSlug = '';
      if (dl) {
        Array.from(dl.options || []).some(opt => {
          if ((opt.value || '').toLowerCase() === val) {
            matchedSlug = opt.getAttribute('data-slug') || '';
            return true;
          }
          return false;
        });
      }
      slugField.value = matchedSlug; // '' if no exact match
    }

    input.addEventListener('change', syncSlug);
    input.addEventListener('blur', syncSlug);
    input.addEventListener('input', () => { if (!input.value) slugField.value = ''; });
  })();
</script>

<script>
(function(){
  const editor   = document.getElementById('pv-editor');
  const output   = document.getElementById('pv-editor-output');
  const form     = document.getElementById('story-form');
  const photos   = document.getElementById('pv-photos');
  const previews = document.getElementById('pv-photo-previews');
  const wcEl     = document.getElementById('pv-wordcount');

  function exec(cmd, val=null){ document.execCommand(cmd, false, val); editor.focus(); }

  document.querySelectorAll('[data-cmd]').forEach(btn => {
    btn.addEventListener('click', () => exec(btn.getAttribute('data-cmd')));
  });
  document.querySelectorAll('[data-block]').forEach(btn => {
    btn.addEventListener('click', () => exec('formatBlock', btn.getAttribute('data-block') === 'p' ? 'p' : btn.getAttribute('data-block')));
  });

  document.getElementById('pv-insert-link').addEventListener('click', () => {
    const url = prompt('Enter URL (https://...)');
    if (!url) return;
    exec('createLink', url);
    editor.querySelectorAll('a').forEach(a => { a.target = '_blank'; a.rel = 'noopener'; });
  });

  document.getElementById('pv-clear-format').addEventListener('click', () => exec('removeFormat'));

  editor.addEventListener('paste', (e) => {
    e.preventDefault();
    const text = (e.clipboardData || window.clipboardData).getData('text');
    if (!text) return;
    const html = text.split(/\n{2,}/).map(p => '<p>' + p.replace(/\n/g,'<br>') + '</p>').join('');
    document.execCommand('insertHTML', false, html);
  });

  function updateWordCount(){
    const words = ((editor.innerText || '').trim().match(/\S+/g) || []).length;
    wcEl.textContent = words;
  }
  editor.addEventListener('input', updateWordCount);
  updateWordCount();

  photos.addEventListener('change', () => {
    previews.innerHTML = '';
    const files = Array.from(photos.files || []);
    if (files.length > 6) { alert('Please upload up to 6 images.'); photos.value = ''; return; }
    const tooBig = files.find(f => f.size > 8 * 1024 * 1024);
    if (tooBig) { alert('Each image must be 8MB or smaller.'); photos.value = ''; return; }
    files.forEach(f => {
      const url = URL.createObjectURL(f);
      const img = document.createElement('img');
      img.src = url; img.alt = f.name; img.style.width = '150px'; img.className = 'rounded border';
      previews.appendChild(img);
    });
  });

  // âœ… Custom validation for the hidden body field
  form.addEventListener('submit', (e) => {
    const clone = editor.cloneNode(true);
    clone.querySelectorAll('script,style').forEach(n => n.remove());
    clone.querySelectorAll('*').forEach(el => {
      [...el.attributes].forEach(att => { if (/^on/i.test(att.name)) el.removeAttribute(att.name); });
    });
    output.value = clone.innerHTML.trim();

    // Block submit if empty (since native 'required' isn't on the hidden field)
    if (!output.value || !output.value.replace(/<[^>]*>/g,'').trim()) {
      e.preventDefault();
      alert('Please write your story before publishing.');
      editor.scrollIntoView({behavior:'smooth', block:'center'});
      editor.focus();
      return false;
    }
  });
})();
</script>
