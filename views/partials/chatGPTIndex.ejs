<!-- views/partials/chatGPT.ejs (AI summaries only, with button updates) -->
<div class="card border-secondary shadow-lg p-3 mb-5 bg-white rounded"
     id="pv-ai-<%= idSuffix || 'one' %>">
  <div class="card-body">
    <h2 class="text-center text-secondary-emphasis mb-2"><strong>Plan Pet Travel</strong></h2>
    <p class="text-center text-muted mb-3">
      I‚Äôm <strong>Scout</strong> üêæ ‚Äî pick an airline, a destination country, and your pet type.
      I‚Äôll show <em>AI summaries</em> split into <em>Airline</em> and <em>Country</em>.
    </p>

    <!-- Planner -->
    <form class="pv-plan-form" aria-label="Build your pet travel plan">
      <div class="mb-3">
        <label class="form-label">Airline</label>
        <select class="form-select pv-airline" required></select>
      </div>

      <div class="mb-3">
        <label class="form-label">Destination Country</label>
        <select class="form-select pv-country" required></select>
      </div>

      <div class="mb-3">
        <label class="form-label">Pet Type</label>
        <select class="form-select pv-pet" required disabled>
          <option value="">Select country first‚Ä¶</option>
        </select>
      </div>

      <div class="text-center">
        <button class="btn btn-primary" type="submit">Get AI Summaries</button>
      </div>
    </form>

    <!-- Server returns the finished two-box AI HTML layout -->
    <div class="mt-4 pv-plan-results" style="display:none;"></div>

    <p class="text-muted small mt-3 mb-0">
      ‚ÑπÔ∏è These are concise AI summaries. Please confirm details with your airline and border authorities.
    </p>
  </div>
</div>

<script>
(function () {
  var suf = "<%= idSuffix || 'one' %>";
  var root = document.getElementById('pv-ai-' + suf);
  if (!root) return;

  // --- helpers ---
  function cap(s){ return (s||'').charAt(0).toUpperCase() + (s||'').slice(1); }
  function slugify(s){
    return (s||'').toString().trim().toLowerCase()
      .replace(/&/g,'-and-')
      .replace(/[^a-z0-9]+/g,'-')
      .replace(/^-+|-+$/g,'');
  }

  // Elements
  var planForm   = root.querySelector('.pv-plan-form');
  var selAirline = root.querySelector('.pv-airline');
  var selCountry = root.querySelector('.pv-country');
  var selPet     = root.querySelector('.pv-pet');
  var resWrap    = root.querySelector('.pv-plan-results');

  function setPets(pets){
    const options = (pets||[]).map(p => '<option value="'+p+'">'+cap(p)+'</option>').join('');
    selPet.innerHTML = '<option value="">Select pet</option>' + options;
    selPet.disabled = !(pets && pets.length);
  }

  // Load airlines + countries
  fetch('/ai/pet-check/options')
    .then(r => r.json())
    .then(data => {
      var airlines = data.airlines || [];
      var countries = data.countries || [];

      selAirline.innerHTML = '<option value="">Select airline</option>' +
        airlines.map(a =>
          '<option value="'+a._id+'" data-code="'+(a.airlineCode||'')+'" data-slug="'+(a.slug || slugify(a.name))+'">'+
            a.name+(a.airlineCode?(' ('+a.airlineCode+')'):'')+
          '</option>'
        ).join('');

      selCountry.innerHTML = '<option value="">Select country</option>' +
        countries.map(c => '<option value="'+c+'">'+c+'</option>').join('');

      setPets([]);
    })
    .catch(e => { console.error('options error', e); setPets([]); });

  // Load pet types once a country is chosen
  selCountry.addEventListener('change', function(){
    var c = selCountry.value;
    if (!c) { setPets([]); return; }
    selPet.disabled = true;
    selPet.innerHTML = '<option value="">Loading pets‚Ä¶</option>';
    fetch('/ai/pet-check/pet-types?country=' + encodeURIComponent(c))
      .then(r => r.json())
      .then(d => setPets(d.petTypes || []))
      .catch(() => setPets([]));
  });

  // Inject a Country footer INSIDE the Country box (Country Rules button only)
  function injectCountryFooter(container, country, petType){
    const base = "https://www.petvoyage.ai";
    const countryUrl = base + "/country/" + encodeURIComponent(country) + "?petType=" + encodeURIComponent(petType);

    const boxes = container.querySelectorAll('.pv-box');
    if (!boxes || boxes.length < 2) return;
    const countryBox = boxes[1];

    if (countryBox.querySelector('.pv-country-footer')) return;

    const footer = document.createElement('div');
    footer.className = 'pv-country-footer mt-3 d-flex flex-wrap justify-content-center';
    footer.innerHTML = `
      <a class="btn btn-outline-dark" href="${countryUrl}" target="_blank" rel="noopener">
        Country Rules
      </a>
    `;
    countryBox.appendChild(footer);
  }

  // Restyle/move ‚ÄúFull airline policy ‚Üó‚Äù into a button at the bottom of the Airline box
  function restyleAirlineButton(container, airlineUrl){
    const boxes = container.querySelectorAll('.pv-box');
    if (!boxes || !boxes.length) return;
    const airlineBox = boxes[0];

    // Remove any existing badge/link version inside the airline box
    const oldBadge = airlineBox.querySelector('a[href*="airlines/"], .pv-sub a');
    if (oldBadge) oldBadge.remove();

    // Avoid duplicate button
    if (airlineBox.querySelector('.pv-airline-footer')) return;

    const footer = document.createElement('div');
    footer.className = 'pv-airline-footer mt-3 d-flex justify-content-center';
    footer.innerHTML = `
      <a class="btn btn-outline-dark" href="${airlineUrl}" target="_blank" rel="noopener">
        Full airline policy ‚Üó
      </a>
    `;
    airlineBox.appendChild(footer);
  }

  // Submit: request server-built two-box **AI** HTML and render it
  planForm.addEventListener('submit', async function(e){
    e.preventDefault();
    var selected    = selAirline.selectedOptions[0];
    var airlineId   = selAirline.value;
    var airlineCode = selected && selected.getAttribute('data-code');
    var airlineSlugFromOpt = selected && selected.getAttribute('data-slug');
    var country     = selCountry.value;
    var petType     = selPet.value;
    if (!airlineId || !country || !petType) return;

    resWrap.style.display = 'block';
    resWrap.innerHTML = '<div class="border rounded p-3 bg-light">Loading AI summaries‚Ä¶</div>';

    try {
      var res = await fetch('/ai/pet-check', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ airlineId, airlineCode, country, petType, useAI: true })
      });
      var data = await res.json();

      if (!res.ok || data.error) {
        resWrap.innerHTML = '<div class="alert alert-danger mb-0">' + (data.error || 'Lookup failed.') + '</div>';
        return;
      }

      const base = "https://www.petvoyage.ai";
      const countryUrl = base + "/country/" + encodeURIComponent(country) + "?petType=" + encodeURIComponent(petType);
      const shopUrl    = "https://petsvoyage.myshopify.com/collections/all";

      const apiSlug    = (data.airline && (data.airline.slug || data.airline.airlineSlug)) ||
                         (data.airline && data.airline.name ? slugify(data.airline.name) : '');
      const airlineSlug = airlineSlugFromOpt || apiSlug || '';
      const airlineUrl  = airlineSlug ? (base + "/airlines/" + airlineSlug)
                                      : (base + "/regulations/airlineList");

      // Render server HTML (two AI boxes)
      resWrap.innerHTML = (data.html || '<div class="alert alert-warning mb-0">No details available.</div>');

      // Style/move the Airline button and inject the Country Rules button
      const container = resWrap.querySelector('.pv-itinerary') || resWrap;
      restyleAirlineButton(container, airlineUrl);
      injectCountryFooter(container, country, petType);

      // Global CTAs below both boxes (Save, Find a vet, Shop)
      const ctaRow = document.createElement('div');
      ctaRow.className = 'mt-3 d-flex flex-wrap gap-2 align-items-center';
      ctaRow.innerHTML = `
        <button class="btn btn-success pv-save-itin">Save to my dashboard</button>
        <button class="btn btn-outline-secondary pv-find-vet">Find a nearby vet</button>
        <a class="btn btn-primary" href="${shopUrl}" target="_blank" rel="noopener">
          <i class="bi bi-shop me-1"></i> Shop travel gear
        </a>
      `;
      resWrap.appendChild(ctaRow);

      // Find a Vet
      var vetBtn2 = resWrap.querySelector('.pv-find-vet');
      if (vetBtn2) {
        vetBtn2.addEventListener('click', function(ev){
          ev.preventDefault();
          if (!navigator.geolocation) { alert('Geolocation not available.'); return; }
          navigator.geolocation.getCurrentPosition(
            function(pos){
              var lat = pos.coords.latitude, lng = pos.coords.longitude;
              window.location.href = '/findAVet?lat='+lat+'&lng='+lng;
            },
            function(err){ alert('Could not get location: ' + err.message); },
            { enableHighAccuracy: true, timeout: 8000 }
          );
        });
      }

      // Save itinerary
      var saveBtn = resWrap.querySelector('.pv-save-itin');
      if (saveBtn) {
        saveBtn.addEventListener('click', async function() {
          var itin = resWrap.querySelector('.pv-itinerary') || resWrap;
          if (!itin) { alert('Nothing to save.'); return; }

          var payload = {
            airlineId,
            airlineCode,
            airlineName: '',
            airlineSlug: airlineSlug || '',
            petPolicyURL: airlineUrl,
            country, petType,
            html: itin.outerHTML
          };

          try {
            const r = await fetch('/favorites/saveItinerary', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(payload)
            });
            const j = await r.json();
            if (!r.ok) { alert(j.message || 'Could not save.'); return; }
            const ok = document.createElement('div');
            ok.className = 'alert alert-success mt-3';
            ok.textContent = j.message || 'Saved.';
            resWrap.appendChild(ok);
            setTimeout(() => ok.remove(), 3000);
          } catch (e) {
            console.error('save itinerary failed', e);
            alert('Network error while saving.');
          }
        });
      }
    } catch (err) {
      console.error('lookup error', err);
      resWrap.innerHTML = '<div class="alert alert-danger mb-0">Network error.</div>';
    }
  });
})();
</script>
