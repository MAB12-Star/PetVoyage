<!-- views/partials/chatGPT.ejs (updated) -->
<div class="card border-secondary shadow-lg p-3 mb-5 bg-white rounded"
     id="pv-ai-<%= idSuffix || 'one' %>">
  <div class="card-body">
    <h2 class="text-center text-secondary-emphasis mb-2"><strong>Plan Pet Travel</strong></h2>
    <p class="text-center text-muted mb-3">
      I‚Äôm <strong>Scout</strong> üêæ ‚Äî pick an airline, a destination country, and your pet type.
      I‚Äôll split results into <em>Airline</em> vs <em>Country (immigration)</em>, suggest a timeline,
      and let you save it to your dashboard.
    </p>

    <!-- Planner -->
    <form class="pv-plan-form" aria-label="Build your pet travel plan">
      <div class="mb-3">
        <label class="form-label">Airline</label> 
        <select class="form-select pv-airline" required></select>
        <div class="form-text">Choose the carrier you‚Äôll fly. Policies can vary widely.</div>
      </div>

      <div class="mb-3">
        <label class="form-label">Destination Country</label>
        <select class="form-select pv-country" required></select>
        <div class="form-text">This determines the immigration/entry rules for your pet.</div>
      </div>

      <div class="mb-3">
        <label class="form-label">Pet Type</label>
        <select class="form-select pv-pet" required disabled>
          <option value="">Select country first to load available pet types‚Ä¶</option>
        </select>
        <div class="form-text">Pet types update based on the country you pick.</div>
      </div>

      <div class="text-center">
        <button class="btn btn-primary" type="submit">Get Requirements</button>
      </div>
    </form>

    <!-- Server returns a full, styled itinerary (with Save + Find Vet + Links). -->
    <div class="mt-4 pv-plan-results" style="display:none;"></div>

    <p class="text-muted small mt-3 mb-0">
      ‚ÑπÔ∏è I combine your database + official sources + AI. I‚Äôll clearly label anything I infer for you.
      Always confirm critical details with your airline and border authorities.
    </p>
  </div>

</div>
<script>
  (function () {
    var suf = "<%= idSuffix || 'one' %>";
    var root = document.getElementById('pv-ai-' + suf);
    if (!root) return;
  
    // --- helpers ---
    function cap(s){ return (s||'').charAt(0).toUpperCase() + (s||'').slice(1); }
    function slugify(s){
      return (s||'').toString().trim().toLowerCase()
        .replace(/&/g,'-and-')
        .replace(/[^a-z0-9]+/g,'-')
        .replace(/^-+|-+$/g,'');
    }
  
    // Elements
    var planForm   = root.querySelector('.pv-plan-form');
    var selAirline = root.querySelector('.pv-airline');
    var selCountry = root.querySelector('.pv-country');
    var selPet     = root.querySelector('.pv-pet');
    var resWrap    = root.querySelector('.pv-plan-results');
  
    function setPets(pets){
      const options = (pets||[]).map(p => '<option value="'+p+'">'+cap(p)+'</option>').join('');
      selPet.innerHTML = '<option value="">Select pet</option>' + options;
      selPet.disabled = !(pets && pets.length);
    }
  
    // Load airlines + countries (ensure <option> has data-slug)
    fetch('/ai/pet-check/options')
      .then(r => r.json())
      .then(data => {
        var airlines = data.airlines || [];
        var countries = data.countries || [];
  
        selAirline.innerHTML = '<option value="">Select airline</option>' +
          airlines.map(a =>
            '<option value="'+a._id+'" data-code="'+(a.airlineCode||'')+'" data-slug="'+(a.slug || slugify(a.name))+'">'+
              a.name+(a.airlineCode?(' ('+a.airlineCode+')'):'')+
            '</option>'
          ).join('');
  
        selCountry.innerHTML = '<option value="">Select country</option>' +
          countries.map(c => '<option value="'+c+'">'+c+'</option>').join('');
  
        setPets([]);
      })
      .catch(e => { console.error('options error', e); setPets([]); });
  
    selCountry.addEventListener('change', function(){
      var c = selCountry.value;
      if (!c) { setPets([]); return; }
      selPet.disabled = true;
      selPet.innerHTML = '<option value="">Loading pets‚Ä¶</option>';
      fetch('/ai/pet-check/pet-types?country=' + encodeURIComponent(c))
        .then(r => r.json())
        .then(d => setPets(d.petTypes || []))
        .catch(() => setPets([]));
    });
  
    // ---- Enhance + modernize itinerary (links + badges + filter)
    function enhanceItinerary(container, ctx) {
      if (!container) return;
  
      // URLs
      const base = "https://www.petvoyage.ai";
      const countryURL = (hash) =>
        base + "/country/" + encodeURIComponent(ctx.country) +
        "?petType=" + encodeURIComponent(ctx.petType) + (hash ? ("#" + hash) : "");
      const urls = {
        overview:     countryURL("overview"),
        timeline:     countryURL("timeline"),
        microchip:    countryURL("microchip"),
        vaccinations: countryURL("vaccinations"),
        documents:    countryURL("documents"),
        origin:       countryURL("origin"),
        notes:        countryURL("notes"),
        shop:         "https://petsvoyage.myshopify.com/collections/all"
      };
  
      // headings -> anchors
      const map = [
        { match: /overview/i, key: "overview" },
        { match: /suggested\s*timeline/i, key: "timeline" },
        { match: /microchip/i, key: "microchip" },
        { match: /vaccinations?/i, key: "vaccinations" },
        { match: /(certifications?|documents?)/i, key: "documents" },
        { match: /(origin[-\s]*specific|origin)/i, key: "origin" },
        { match: /additional\s*notes/i, key: "notes" }
      ];
  
      // Add ‚ÄúOpen page‚Äù link beside section headings
      container.querySelectorAll('h1,h2,h3,h4').forEach(h => {
        const txt = (h.textContent || "").trim();
        const hit = map.find(m => m.match.test(txt));
        if (!hit) return;
        if (!h.querySelector('.pv-open-badge')) {
          const a = document.createElement('a');
          a.href = urls[hit.key];
          a.className = 'pv-open-badge ms-2 badge rounded-pill text-bg-light border';
          a.target = '_blank'; a.rel = 'noopener';
          a.innerHTML = 'Open page <span aria-hidden="true">‚Üó</span>';
          h.appendChild(a);
        }
      });
  
      // --- Classify lines as COUNTRY vs AIRLINE (heuristic)
      const airlineRe = /(airline|carrier|flight|in[-\s]?cabin|checked|cargo|kennel|crate|dimension|size|weight|fee|reservation|book|booking|aircraft|seat|embargo|temperature|layover|connection|check[-\s]?in|gate|boarding|pet[-\s]?fee)/i;
      const countryRe = /(entry|import|customs|immigration|permit|rabies|vaccin|microchip|certificate|vet|veterinary|treatment|deworm|quarantine|inspection|border|senasica|usda|cfia|defra|eu)/i;
  
      function classifyText(t) {
        const a = airlineRe.test(t);
        const c = countryRe.test(t);
        if (a && c) return 'both';
        if (a) return 'airline';
        return 'country';
      }
      function badgeHtml(type){
        if (type === 'airline') return '<span class="badge text-bg-primary me-2">Airline</span>';
        if (type === 'both')    return '<span class="badge text-bg-warning text-dark me-2">Country + Airline</span>';
        return '<span class="badge text-bg-success me-2">Country</span>';
      }
  
      // Convert plain UL/OL into modern list-group with badges
      container.querySelectorAll('ul,ol').forEach(list => {
        // avoid reprocessing
        if (list.classList.contains('pv-processed')) return;
        const lg = document.createElement('div');
        lg.className = 'list-group pv-processed';
        list.querySelectorAll(':scope > li').forEach(li => {
          const txt = (li.innerText || '').trim();
          const kind = classifyText(txt);
          const item = document.createElement('div');
          item.className = 'list-group-item d-flex align-items-start gap-2';
          item.dataset.origin = kind;
          item.innerHTML = badgeHtml(kind) + '<div>'+ li.innerHTML +'</div>';
  
          // promote immediate nested bullets as subtle sublines
          li.querySelectorAll(':scope > ul > li, :scope > ol > li').forEach(sub => {
            const subLine = document.createElement('div');
            subLine.className = 'mt-2 ps-4 text-body-secondary';
            subLine.dataset.origin = classifyText(sub.innerText || '');
            subLine.innerHTML = '‚Ä¢ ' + sub.innerHTML;
            item.appendChild(subLine);
          });
  
          lg.appendChild(item);
        });
        list.replaceWith(lg);
      });
  
      // Add filter bar (All / Country / Airline / Both)
      if (!container.querySelector('.pv-origin-filter')) {
        const bar = document.createElement('div');
        bar.className = 'pv-origin-filter d-flex align-items-center gap-2 mb-3';
        bar.innerHTML = `
          <span class="small text-muted">Show:</span>
          <div class="btn-group btn-group-sm" role="group">
            <button type="button" class="btn btn-outline-secondary active" data-filter="all">All</button>
            <button type="button" class="btn btn-outline-success" data-filter="country">Country</button>
            <button type="button" class="btn btn-outline-primary" data-filter="airline">Airline</button>
            <button type="button" class="btn btn-outline-warning" data-filter="both">Both</button>
          </div>`;
        container.prepend(bar);
  
        const btns = bar.querySelectorAll('button[data-filter]');
        function applyFilter(f){
          const items = container.querySelectorAll('.list-group-item, .pv-processed [data-origin]');
          items.forEach(el => {
            const o = el.dataset.origin || 'country';
            const show = (f==='all') ||
                         (f==='country' && (o==='country' || o==='both')) ||
                         (f==='airline' && (o==='airline' || o==='both')) ||
                         (f==='both' && o==='both');
            el.classList.toggle('d-none', !show);
          });
        }
        btns.forEach(b => b.addEventListener('click', () => {
          btns.forEach(x => x.classList.remove('active'));
          b.classList.add('active');
          applyFilter(b.getAttribute('data-filter'));
        }));
      }
  
      // Add ‚ÄúShop the checklist‚Äù CTA once
      if (!container.querySelector('.pv-shop-cta')) {
        const cta = document.createElement('div');
        cta.className = 'pv-shop-cta alert alert-info mt-3 d-flex flex-wrap align-items-center gap-2';
        cta.innerHTML = `
          <i class="bi bi-shop fs-4"></i>
          <div class="flex-grow-1">
            Stock up before you fly‚Äîcarriers, bowls, labels, pads, and more.
          </div>
          <a class="btn btn-primary btn-sm" href="${urls.shop}" target="_blank" rel="noopener">
            Visit Shop
          </a>`;
        container.appendChild(cta);
      }
    }
  
    // Submit: request server-built itinerary HTML and render it
    planForm.addEventListener('submit', async function(e){
      e.preventDefault();
      var selected    = selAirline.selectedOptions[0];
      var airlineId   = selAirline.value;
      var airlineCode = selected && selected.getAttribute('data-code');
      var airlineSlugFromOpt = selected && selected.getAttribute('data-slug');
      var country     = selCountry.value;
      var petType     = selPet.value;
      if (!airlineId || !country || !petType) return;
  
      resWrap.style.display = 'block';
      resWrap.innerHTML = '<div class="border rounded p-3 bg-light">Loading‚Ä¶</div>';
  
      try {
        var res = await fetch('/ai/pet-check', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ airlineId, airlineCode, country, petType })
        });
        var data = await res.json();
  
        if (!res.ok || data.error) {
          resWrap.innerHTML = '<div class="alert alert-danger mb-0">' + (data.error || 'Lookup failed.') + '</div>';
          return;
        }
  
        const base = "https://www.petvoyage.ai";
        const countryUrl = base + "/country/" + encodeURIComponent(country) + "?petType=" + encodeURIComponent(petType);
        const shopUrl    = "https://petsvoyage.myshopify.com/collections/all";
  
        const apiSlug    = (data.airline && (data.airline.slug || data.airline.airlineSlug)) ||
                           (data.airline && data.airline.name ? slugify(data.airline.name) : '');
        const airlineSlug = airlineSlugFromOpt || apiSlug || '';
        const airlineUrl  = airlineSlug ? (base + "/airlines/" + airlineSlug)
                                        : (base + "/regulations/airlineList");
  
        const ctaRow = `
          <div class="mt-3 d-flex flex-wrap gap-2 align-items-center">
            <button class="btn btn-success pv-save-itin">Save to my dashboard</button>
            <button class="btn btn-outline-secondary pv-find-vet">Find a nearby vet</button>
            <a class="btn btn-outline-dark" href="${countryUrl}" target="_blank" rel="noopener">Country Rules</a>
            <a class="btn btn-primary" href="${shopUrl}" target="_blank" rel="noopener">
              <i class="bi bi-shop me-1"></i> Shop travel gear
            </a>
            <a class="btn btn-outline-primary" href="${airlineUrl}" target="_blank" rel="noopener">Airline Pet Policy</a>
          </div>
        `;
  
        // Render server HTML + CTAs
        resWrap.innerHTML = (data.html || '<div class="alert alert-warning mb-0">No details available.</div>') + ctaRow;
  
        // Enhance headings + lists + filter
        enhanceItinerary(resWrap.querySelector('.pv-itinerary') || resWrap, { country, petType });
  
        // Find a Vet
        var vetBtn2 = resWrap.querySelector('.pv-find-vet');
        if (vetBtn2) {
          vetBtn2.addEventListener('click', function(ev){
            ev.preventDefault();
            if (!navigator.geolocation) { alert('Geolocation not available.'); return; }
            navigator.geolocation.getCurrentPosition(
              function(pos){
                var lat = pos.coords.latitude, lng = pos.coords.longitude;
                window.location.href = '/findAVet?lat='+lat+'&lng='+lng;
              },
              function(err){ alert('Could not get location: ' + err.message); },
              { enableHighAccuracy: true, timeout: 8000 }
            );
          });
        }
  
        // Save itinerary
        var saveBtn = resWrap.querySelector('.pv-save-itin');
        if (saveBtn) {
          saveBtn.addEventListener('click', async function() {
            var itin = resWrap.querySelector('.pv-itinerary') || resWrap;
            if (!itin) { alert('Nothing to save.'); return; }
  
            var payload = {
              airlineId,
              airlineCode,
              airlineName: '',
              airlineSlug: airlineSlug || '',
              petPolicyURL: airlineUrl,   // save internal airline page URL
              country, petType,
              html: itin.outerHTML
            };
  
            try {
              const r = await fetch('/favorites/saveItinerary', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
              });
              const j = await r.json();
              if (!r.ok) { alert(j.message || 'Could not save.'); return; }
              const ok = document.createElement('div');
              ok.className = 'alert alert-success mt-3';
              ok.textContent = j.message || 'Saved.';
              resWrap.appendChild(ok);
              setTimeout(() => ok.remove(), 3000);
            } catch (e) {
              console.error('save itinerary failed', e);
              alert('Network error while saving.');
            }
          });
        }
      } catch (err) {
        console.error('lookup error', err);
        resWrap.innerHTML = '<div class="alert alert-danger mb-0">Network error.</div>';
      }
    });
  })();
  </script>
  


